version: '3.8'
services:
  db:
    image: docker.io/timescale/timescaledb-ha:pg15-ts2.12-all
    container_name: db
    environment:
      TIMESCALEDB_TELEMETRY: off
      TS_TUNE_MEMORY: 500MB
      TS_TUNE_NUM_CPUS: 1
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - 5435:5432
    expose:
      - 5435
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./sql:/tmp/sql:ro
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      start_period: 15s
    mem_limit: 1g
    networks:
      - vdb

  dagster_postgresql:
    image: postgres:11
    container_name: dagster_postgresql
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"
    networks:
      - vdb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 10s
      timeout: 8s
      retries: 5

  vandebron:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: vandebron
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_CURRENT_IMAGE: "vandebron-vandebron"
      PGHOST: db
    networks:
      - vdb

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  docker_example_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_example_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - vdb
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      vandebron:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  docker_example_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - vdb
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      vandebron:
        condition: service_started

volumes:
  pg-data:
    driver: local

networks:
  vdb:
    name: vdb